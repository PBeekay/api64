from http.server import BaseHTTPRequestHandler, HTTPServer
import json, base64
from urllib.parse import urlparse, parse_qs
import threading
import socketserver

class Base64API(BaseHTTPRequestHandler): # BaseHTTPRequestHandler sÄ±nÄ±fÄ±nÄ± kullanarak HTTP isteklerini iÅŸlemek iÃ§in bir sÄ±nÄ±f oluÅŸturuyoruz
    def _send(self, response): # YanÄ±tÄ± gÃ¶ndermek iÃ§in bir fonksiyon oluÅŸturuyoruz
        self.send_response(200) # HTTP 200 OK yanÄ±tÄ± gÃ¶nderiyoruz
        self.send_header("Content-Type", "application/json") # Ä°Ã§erik tipi olarak JSON belirtiyoruz
        self.end_headers()
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode()) # JSON'u byte Ã§evirip gÃ¶nderiyoruz

    def process(self, text, mode): # Metni iÅŸleme fonksiyonu
        try:
            if mode == "encode": # Encode modu kullanÄ±lÄ±r
                return {"success": True, "result": base64.b64encode(text.encode()).decode()}
            elif mode == "decode": # Decode modu kullanÄ±lÄ±r
                return {"success": True, "result": base64.b64decode(text).decode()}
            else: # HatalÄ± mod kullanÄ±lÄ±rsa hata mesajÄ± dÃ¶ndÃ¼rÃ¼lÃ¼r
                return {"success": False, "error": f"Unknown mode: {mode}"}
        except Exception as e: # Hata durumunda hata mesajÄ± dÃ¶ndÃ¼rÃ¼lÃ¼r
            return {"success": False, "error": str(e)}

    def do_POST(self): # POST isteklerini iÅŸlemek iÃ§in bir fonksiyon oluÅŸturuyoruz
        try:
            data = json.loads(self.rfile.read(int(self.headers.get("Content-Length", 0)))) # POST body'yi JSON'a Ã§eviriyoruz
            self._send(self.process(data.get("text", ""), data.get("mode", "encode").lower())) # Metni iÅŸleme fonksiyonunu Ã§aÄŸÄ±rÄ±yoruz
        except json.JSONDecodeError as e: # JSON decode hatasÄ± iÃ§in Ã¶zel kontrol
            self._send({"success": False, "error": f"Invalid JSON: {e}"})

    def do_GET(self): # GET isteklerini iÅŸlemek iÃ§in bir fonksiyon oluÅŸturuyoruz
        params = parse_qs(urlparse(self.path).query) # URL'deki query parametrelerini alÄ±yoruz
        self._send(self.process(params.get("text", [""])[0], params.get("mode", ["encode"])[0].lower())) # Metni iÅŸleme fonksiyonunu Ã§aÄŸÄ±rÄ±yoruz

# Multi-threaded HTTP Server sÄ±nÄ±fÄ±
class ThreadedHTTPServer(socketserver.ThreadingMixIn, HTTPServer):
    allow_reuse_address = True
    daemon_threads = True

if __name__ == "__main__":
    server = ThreadedHTTPServer(("0.0.0.0", 8080), Base64API) # Multi-threaded server'Ä± baÅŸlatÄ±yoruz
    print("ğŸš€ Multi-threaded server running on port 8080...") # Server'Ä±n Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ± belirtiyoruz
    print("ğŸ“ˆ Now supports multiple concurrent requests!")
    server.serve_forever()
